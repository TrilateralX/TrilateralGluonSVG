// Generated by Haxe 4.2.0-rc.1+354c24d30
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_dsHelper_flatInterleave_core__Flat32_Flat32_Impl_
#include <dsHelper/flatInterleave/core/_Flat32/Flat32_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif

namespace dsHelper{
namespace flatInterleave{
namespace core{
namespace _Flat32{

void Flat32_Impl__obj::__construct() { }

Dynamic Flat32_Impl__obj::__CreateEmpty() { return new Flat32_Impl__obj; }

void *Flat32_Impl__obj::_hx_vtable = 0;

Dynamic Flat32_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Flat32_Impl__obj > _hx_result = new Flat32_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Flat32_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x327f37bf;
}

int Flat32_Impl__obj::get_size( ::haxe::io::ArrayBufferViewImpl this1){
	 ::haxe::io::Bytes _this = this1->bytes;
	int pos = (4 + this1->byteOffset);
	bool _hx_tmp;
	if ((pos >= 0)) {
		_hx_tmp = ((pos + 4) > _this->length);
	}
	else {
		_hx_tmp = true;
	}
	if (_hx_tmp) {
		HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
	}
	return ::Std_obj::_hx_int( ::__hxcpp_memory_get_float(_this->b,pos));
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Flat32_Impl__obj,get_size,return )

int Flat32_Impl__obj::set_size( ::haxe::io::ArrayBufferViewImpl this1,int id){
	{
		Float pos_ = ( (Float)(id) );
		if ((0 < (this1->byteLength >> 2))) {
			this1->bytes->setFloat(this1->byteOffset,pos_);
		}
		 ::haxe::io::Bytes _this = this1->bytes;
		int pos = this1->byteOffset;
		bool _hx_tmp;
		if ((pos >= 0)) {
			_hx_tmp = ((pos + 4) > _this->length);
		}
		else {
			_hx_tmp = true;
		}
		if (_hx_tmp) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		Float _hx_tmp1 =  ::__hxcpp_memory_get_float(_this->b,pos);
		 ::haxe::io::Bytes _this1 = this1->bytes;
		int pos1 = (4 + this1->byteOffset);
		bool _hx_tmp2;
		if ((pos1 >= 0)) {
			_hx_tmp2 = ((pos1 + 4) > _this1->length);
		}
		else {
			_hx_tmp2 = true;
		}
		if (_hx_tmp2) {
			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
		}
		if ((_hx_tmp1 > ( ::__hxcpp_memory_get_float(_this1->b,pos1) - ( (Float)(1) )))) {
			 ::haxe::io::Bytes _this = this1->bytes;
			int pos = this1->byteOffset;
			bool _hx_tmp;
			if ((pos >= 0)) {
				_hx_tmp = ((pos + 4) > _this->length);
			}
			else {
				_hx_tmp = true;
			}
			if (_hx_tmp) {
				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(::haxe::io::Error_obj::OutsideBounds_dyn()));
			}
			Float value =  ::__hxcpp_memory_get_float(_this->b,pos);
			if ((1 < (this1->byteLength >> 2))) {
				this1->bytes->setFloat((4 + this1->byteOffset),value);
			}
		}
	}
	return id;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Flat32_Impl__obj,set_size,return )


Flat32_Impl__obj::Flat32_Impl__obj()
{
}

bool Flat32_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"get_size") ) { outValue = get_size_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_size") ) { outValue = set_size_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Flat32_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Flat32_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Flat32_Impl__obj::__mClass;

static ::String Flat32_Impl__obj_sStaticFields[] = {
	HX_("get_size",4a,5c,0e,cc),
	HX_("set_size",be,b5,6b,7a),
	::String(null())
};

void Flat32_Impl__obj::__register()
{
	Flat32_Impl__obj _hx_dummy;
	Flat32_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("dsHelper.flatInterleave.core._Flat32.Flat32_Impl_",f5,cf,fa,0e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Flat32_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Flat32_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Flat32_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Flat32_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Flat32_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace dsHelper
} // end namespace flatInterleave
} // end namespace core
} // end namespace _Flat32
