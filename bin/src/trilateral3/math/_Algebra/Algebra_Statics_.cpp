// Generated by Haxe 4.2.0-rc.1+354c24d30
#include <hxcpp.h>

#ifndef INCLUDED_trilateral3_math__Algebra_Algebra_Statics_
#include <trilateral3/math/_Algebra/Algebra_Statics_.h>
#endif

namespace trilateral3{
namespace math{
namespace _Algebra{

void Algebra_Statics__obj::__construct() { }

Dynamic Algebra_Statics__obj::__CreateEmpty() { return new Algebra_Statics__obj; }

void *Algebra_Statics__obj::_hx_vtable = 0;

Dynamic Algebra_Statics__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Algebra_Statics__obj > _hx_result = new Algebra_Statics__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Algebra_Statics__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x105d6895;
}

Float Algebra_Statics__obj::quadStep;


Algebra_Statics__obj::Algebra_Statics__obj()
{
}

bool Algebra_Statics__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"quadStep") ) { outValue = ( quadStep ); return true; }
	}
	return false;
}

bool Algebra_Statics__obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"quadStep") ) { quadStep=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Algebra_Statics__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Algebra_Statics__obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Algebra_Statics__obj::quadStep,HX_("quadStep",b3,bb,78,d4)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Algebra_Statics__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Algebra_Statics__obj::quadStep,"quadStep");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Algebra_Statics__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Algebra_Statics__obj::quadStep,"quadStep");
};

#endif

::hx::Class Algebra_Statics__obj::__mClass;

static ::String Algebra_Statics__obj_sStaticFields[] = {
	HX_("quadStep",b3,bb,78,d4),
	::String(null())
};

void Algebra_Statics__obj::__register()
{
	Algebra_Statics__obj _hx_dummy;
	Algebra_Statics__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("trilateral3.math._Algebra.Algebra_Statics_",97,39,bb,38);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Algebra_Statics__obj::__GetStatic;
	__mClass->mSetStaticField = &Algebra_Statics__obj::__SetStatic;
	__mClass->mMarkFunc = Algebra_Statics__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Algebra_Statics__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Algebra_Statics__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Algebra_Statics__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Algebra_Statics__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Algebra_Statics__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Algebra_Statics__obj::__boot()
{
{
	quadStep = ((Float)0.03);
}
}

} // end namespace trilateral3
} // end namespace math
} // end namespace _Algebra
